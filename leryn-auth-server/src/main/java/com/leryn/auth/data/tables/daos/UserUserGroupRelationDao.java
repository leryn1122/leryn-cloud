/*
 * This file is generated by jOOQ.
 */
package com.leryn.auth.data.tables.daos;


import com.leryn.auth.data.tables.UserUserGroupRelation;
import com.leryn.auth.data.tables.records.UserUserGroupRelationRecord;

import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * 用户-用户组关系表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class UserUserGroupRelationDao extends DAOImpl<UserUserGroupRelationRecord, com.leryn.auth.data.tables.pojos.UserUserGroupRelation, Integer> {

    /**
     * Create a new UserUserGroupRelationDao without any configuration
     */
    public UserUserGroupRelationDao() {
        super(UserUserGroupRelation.USER_USER_GROUP_RELATION, com.leryn.auth.data.tables.pojos.UserUserGroupRelation.class);
    }

    /**
     * Create a new UserUserGroupRelationDao with an attached configuration
     */
    @Autowired
    public UserUserGroupRelationDao(Configuration configuration) {
        super(UserUserGroupRelation.USER_USER_GROUP_RELATION, com.leryn.auth.data.tables.pojos.UserUserGroupRelation.class, configuration);
    }

    @Override
    public Integer getId(com.leryn.auth.data.tables.pojos.UserUserGroupRelation object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.leryn.auth.data.tables.pojos.UserUserGroupRelation> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(UserUserGroupRelation.USER_USER_GROUP_RELATION.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.leryn.auth.data.tables.pojos.UserUserGroupRelation> fetchById(Integer... values) {
        return fetch(UserUserGroupRelation.USER_USER_GROUP_RELATION.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.leryn.auth.data.tables.pojos.UserUserGroupRelation fetchOneById(Integer value) {
        return fetchOne(UserUserGroupRelation.USER_USER_GROUP_RELATION.ID, value);
    }

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.leryn.auth.data.tables.pojos.UserUserGroupRelation> fetchRangeOfCreateTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserUserGroupRelation.USER_USER_GROUP_RELATION.CREATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    public List<com.leryn.auth.data.tables.pojos.UserUserGroupRelation> fetchByCreateTime(LocalDateTime... values) {
        return fetch(UserUserGroupRelation.USER_USER_GROUP_RELATION.CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>modified_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.leryn.auth.data.tables.pojos.UserUserGroupRelation> fetchRangeOfModifiedTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(UserUserGroupRelation.USER_USER_GROUP_RELATION.MODIFIED_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modified_time IN (values)</code>
     */
    public List<com.leryn.auth.data.tables.pojos.UserUserGroupRelation> fetchByModifiedTime(LocalDateTime... values) {
        return fetch(UserUserGroupRelation.USER_USER_GROUP_RELATION.MODIFIED_TIME, values);
    }
}
