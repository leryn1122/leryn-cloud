/*
 * This file is generated by jOOQ.
 */
package com.leryn.auth.data.tables.daos;


import com.leryn.auth.data.tables.AuthorityApiRelation;
import com.leryn.auth.data.tables.records.AuthorityApiRelationRecord;

import java.time.LocalDateTime;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;


/**
 * 权限-API权限表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
@Repository
public class AuthorityApiRelationDao extends DAOImpl<AuthorityApiRelationRecord, com.leryn.auth.data.tables.pojos.AuthorityApiRelation, Integer> {

    /**
     * Create a new AuthorityApiRelationDao without any configuration
     */
    public AuthorityApiRelationDao() {
        super(AuthorityApiRelation.AUTHORITY_API_RELATION, com.leryn.auth.data.tables.pojos.AuthorityApiRelation.class);
    }

    /**
     * Create a new AuthorityApiRelationDao with an attached configuration
     */
    @Autowired
    public AuthorityApiRelationDao(Configuration configuration) {
        super(AuthorityApiRelation.AUTHORITY_API_RELATION, com.leryn.auth.data.tables.pojos.AuthorityApiRelation.class, configuration);
    }

    @Override
    public Integer getId(com.leryn.auth.data.tables.pojos.AuthorityApiRelation object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.leryn.auth.data.tables.pojos.AuthorityApiRelation> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(AuthorityApiRelation.AUTHORITY_API_RELATION.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.leryn.auth.data.tables.pojos.AuthorityApiRelation> fetchById(Integer... values) {
        return fetch(AuthorityApiRelation.AUTHORITY_API_RELATION.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.leryn.auth.data.tables.pojos.AuthorityApiRelation fetchOneById(Integer value) {
        return fetchOne(AuthorityApiRelation.AUTHORITY_API_RELATION.ID, value);
    }

    /**
     * Fetch records that have <code>url BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.leryn.auth.data.tables.pojos.AuthorityApiRelation> fetchRangeOfUrl(String lowerInclusive, String upperInclusive) {
        return fetchRange(AuthorityApiRelation.AUTHORITY_API_RELATION.URL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>url IN (values)</code>
     */
    public List<com.leryn.auth.data.tables.pojos.AuthorityApiRelation> fetchByUrl(String... values) {
        return fetch(AuthorityApiRelation.AUTHORITY_API_RELATION.URL, values);
    }

    /**
     * Fetch records that have <code>create_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.leryn.auth.data.tables.pojos.AuthorityApiRelation> fetchRangeOfCreateTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(AuthorityApiRelation.AUTHORITY_API_RELATION.CREATE_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>create_time IN (values)</code>
     */
    public List<com.leryn.auth.data.tables.pojos.AuthorityApiRelation> fetchByCreateTime(LocalDateTime... values) {
        return fetch(AuthorityApiRelation.AUTHORITY_API_RELATION.CREATE_TIME, values);
    }

    /**
     * Fetch records that have <code>modified_time BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<com.leryn.auth.data.tables.pojos.AuthorityApiRelation> fetchRangeOfModifiedTime(LocalDateTime lowerInclusive, LocalDateTime upperInclusive) {
        return fetchRange(AuthorityApiRelation.AUTHORITY_API_RELATION.MODIFIED_TIME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>modified_time IN (values)</code>
     */
    public List<com.leryn.auth.data.tables.pojos.AuthorityApiRelation> fetchByModifiedTime(LocalDateTime... values) {
        return fetch(AuthorityApiRelation.AUTHORITY_API_RELATION.MODIFIED_TIME, values);
    }
}
