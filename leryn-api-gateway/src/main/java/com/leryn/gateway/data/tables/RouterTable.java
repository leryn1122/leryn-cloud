/*
 * This file is generated by jOOQ.
 */
package com.leryn.gateway.data.tables;


import com.leryn.gateway.data.Gateway;
import com.leryn.gateway.data.Keys;
import com.leryn.gateway.data.tables.records.RouterTableRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 路由表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RouterTable extends TableImpl<RouterTableRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gateway.router_table</code>
     */
    public static final RouterTable ROUTER_TABLE = new RouterTable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RouterTableRecord> getRecordType() {
        return RouterTableRecord.class;
    }

    /**
     * The column <code>gateway.router_table.id</code>. 代理主键
     */
    public final TableField<RouterTableRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "代理主键");

    /**
     * The column <code>gateway.router_table.router_id</code>. 路由ID
     */
    public final TableField<RouterTableRecord, String> ROUTER_ID = createField(DSL.name("router_id"), SQLDataType.VARCHAR(100).nullable(false), this, "路由ID");

    /**
     * The column <code>gateway.router_table.url_prefix</code>. URL前缀
     */
    public final TableField<RouterTableRecord, String> URL_PREFIX = createField(DSL.name("url_prefix"), SQLDataType.VARCHAR(100).nullable(false), this, "URL前缀");

    /**
     * The column <code>gateway.router_table.route_host</code>. 路由地址
     */
    public final TableField<RouterTableRecord, String> ROUTE_HOST = createField(DSL.name("route_host"), SQLDataType.VARCHAR(100).nullable(false), this, "路由地址");

    /**
     * The column <code>gateway.router_table.rewrite</code>. 是否重写URL路径
     */
    public final TableField<RouterTableRecord, Boolean> REWRITE = createField(DSL.name("rewrite"), SQLDataType.BOOLEAN.nullable(false).defaultValue(DSL.inline("0", SQLDataType.BOOLEAN)), this, "是否重写URL路径");

    /**
     * The column <code>gateway.router_table.rewrite_regexp</code>. 重写表达式
     */
    public final TableField<RouterTableRecord, String> REWRITE_REGEXP = createField(DSL.name("rewrite_regexp"), SQLDataType.VARCHAR(100), this, "重写表达式");

    /**
     * The column <code>gateway.router_table.rewrite_target</code>. 重写表达式
     */
    public final TableField<RouterTableRecord, String> REWRITE_TARGET = createField(DSL.name("rewrite_target"), SQLDataType.VARCHAR(100), this, "重写表达式");

    /**
     * The column <code>gateway.router_table.create_time</code>. 创建时间
     */
    public final TableField<RouterTableRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>gateway.router_table.modified_time</code>. 修改时间
     */
    public final TableField<RouterTableRecord, LocalDateTime> MODIFIED_TIME = createField(DSL.name("modified_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "修改时间");

    private RouterTable(Name alias, Table<RouterTableRecord> aliased) {
        this(alias, aliased, null);
    }

    private RouterTable(Name alias, Table<RouterTableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("路由表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>gateway.router_table</code> table reference
     */
    public RouterTable(String alias) {
        this(DSL.name(alias), ROUTER_TABLE);
    }

    /**
     * Create an aliased <code>gateway.router_table</code> table reference
     */
    public RouterTable(Name alias) {
        this(alias, ROUTER_TABLE);
    }

    /**
     * Create a <code>gateway.router_table</code> table reference
     */
    public RouterTable() {
        this(DSL.name("router_table"), null);
    }

    public <O extends Record> RouterTable(Table<O> child, ForeignKey<O, RouterTableRecord> key) {
        super(child, key, ROUTER_TABLE);
    }

    @Override
    public Schema getSchema() {
        return Gateway.GATEWAY;
    }

    @Override
    public Identity<RouterTableRecord, Integer> getIdentity() {
        return (Identity<RouterTableRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<RouterTableRecord> getPrimaryKey() {
        return Keys.KEY_ROUTER_TABLE_PRIMARY;
    }

    @Override
    public List<UniqueKey<RouterTableRecord>> getKeys() {
        return Arrays.<UniqueKey<RouterTableRecord>>asList(Keys.KEY_ROUTER_TABLE_PRIMARY, Keys.KEY_ROUTER_TABLE_ROUTER_UN);
    }

    @Override
    public RouterTable as(String alias) {
        return new RouterTable(DSL.name(alias), this);
    }

    @Override
    public RouterTable as(Name alias) {
        return new RouterTable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RouterTable rename(String name) {
        return new RouterTable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RouterTable rename(Name name) {
        return new RouterTable(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<Integer, String, String, String, Boolean, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
