/*
 * This file is generated by jOOQ.
 */
package com.leryn.gateway.data.tables;


import com.leryn.gateway.data.Gateway;
import com.leryn.gateway.data.Keys;
import com.leryn.gateway.data.tables.records.ServiceDiscoveryRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 服务发现
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ServiceDiscovery extends TableImpl<ServiceDiscoveryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gateway.service_discovery</code>
     */
    public static final ServiceDiscovery SERVICE_DISCOVERY = new ServiceDiscovery();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ServiceDiscoveryRecord> getRecordType() {
        return ServiceDiscoveryRecord.class;
    }

    /**
     * The column <code>gateway.service_discovery.id</code>. 代理主键
     */
    public final TableField<ServiceDiscoveryRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "代理主键");

    /**
     * The column <code>gateway.service_discovery.service</code>. 服务名
     */
    public final TableField<ServiceDiscoveryRecord, String> SERVICE = createField(DSL.name("service"), SQLDataType.VARCHAR(100).nullable(false), this, "服务名");

    /**
     * The column <code>gateway.service_discovery.host</code>. 主机Host
     */
    public final TableField<ServiceDiscoveryRecord, String> HOST = createField(DSL.name("host"), SQLDataType.VARCHAR(100).nullable(false), this, "主机Host");

    /**
     * The column <code>gateway.service_discovery.profile</code>. 环境, profile
     */
    public final TableField<ServiceDiscoveryRecord, String> PROFILE = createField(DSL.name("profile"), SQLDataType.VARCHAR(100).defaultValue(DSL.inline("default", SQLDataType.VARCHAR)), this, "环境, profile");

    /**
     * The column <code>gateway.service_discovery.create_time</code>. 创建时间
     */
    public final TableField<ServiceDiscoveryRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>gateway.service_discovery.modified_time</code>. 修改时间
     */
    public final TableField<ServiceDiscoveryRecord, LocalDateTime> MODIFIED_TIME = createField(DSL.name("modified_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "修改时间");

    private ServiceDiscovery(Name alias, Table<ServiceDiscoveryRecord> aliased) {
        this(alias, aliased, null);
    }

    private ServiceDiscovery(Name alias, Table<ServiceDiscoveryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("服务发现"), TableOptions.table());
    }

    /**
     * Create an aliased <code>gateway.service_discovery</code> table reference
     */
    public ServiceDiscovery(String alias) {
        this(DSL.name(alias), SERVICE_DISCOVERY);
    }

    /**
     * Create an aliased <code>gateway.service_discovery</code> table reference
     */
    public ServiceDiscovery(Name alias) {
        this(alias, SERVICE_DISCOVERY);
    }

    /**
     * Create a <code>gateway.service_discovery</code> table reference
     */
    public ServiceDiscovery() {
        this(DSL.name("service_discovery"), null);
    }

    public <O extends Record> ServiceDiscovery(Table<O> child, ForeignKey<O, ServiceDiscoveryRecord> key) {
        super(child, key, SERVICE_DISCOVERY);
    }

    @Override
    public Schema getSchema() {
        return Gateway.GATEWAY;
    }

    @Override
    public Identity<ServiceDiscoveryRecord, Integer> getIdentity() {
        return (Identity<ServiceDiscoveryRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ServiceDiscoveryRecord> getPrimaryKey() {
        return Keys.KEY_SERVICE_DISCOVERY_PRIMARY;
    }

    @Override
    public List<UniqueKey<ServiceDiscoveryRecord>> getKeys() {
        return Arrays.<UniqueKey<ServiceDiscoveryRecord>>asList(Keys.KEY_SERVICE_DISCOVERY_PRIMARY);
    }

    @Override
    public ServiceDiscovery as(String alias) {
        return new ServiceDiscovery(DSL.name(alias), this);
    }

    @Override
    public ServiceDiscovery as(Name alias) {
        return new ServiceDiscovery(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ServiceDiscovery rename(String name) {
        return new ServiceDiscovery(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ServiceDiscovery rename(Name name) {
        return new ServiceDiscovery(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
