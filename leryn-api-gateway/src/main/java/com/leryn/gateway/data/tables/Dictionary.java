/*
 * This file is generated by jOOQ.
 */
package com.leryn.gateway.data.tables;


import com.leryn.gateway.data.Gateway;
import com.leryn.gateway.data.tables.records.DictionaryRecord;

import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * 字典表
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dictionary extends TableImpl<DictionaryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>gateway.dictionary</code>
     */
    public static final Dictionary DICTIONARY = new Dictionary();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictionaryRecord> getRecordType() {
        return DictionaryRecord.class;
    }

    /**
     * The column <code>gateway.dictionary.id</code>. 代理主键
     */
    public final TableField<DictionaryRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "代理主键");

    /**
     * The column <code>gateway.dictionary.entry_key</code>. 词条名
     */
    public final TableField<DictionaryRecord, String> ENTRY_KEY = createField(DSL.name("entry_key"), SQLDataType.VARCHAR(100).nullable(false), this, "词条名");

    /**
     * The column <code>gateway.dictionary.entry_value</code>. 词条值
     */
    public final TableField<DictionaryRecord, String> ENTRY_VALUE = createField(DSL.name("entry_value"), SQLDataType.VARCHAR(255).nullable(false), this, "词条值");

    /**
     * The column <code>gateway.dictionary.type</code>. 类型
     */
    public final TableField<DictionaryRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(100).nullable(false).defaultValue(DSL.inline("string", SQLDataType.VARCHAR)), this, "类型");

    /**
     * The column <code>gateway.dictionary.description</code>. 描述
     */
    public final TableField<DictionaryRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.VARCHAR(255).nullable(false), this, "描述");

    /**
     * The column <code>gateway.dictionary.create_time</code>. 创建时间
     */
    public final TableField<DictionaryRecord, LocalDateTime> CREATE_TIME = createField(DSL.name("create_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "创建时间");

    /**
     * The column <code>gateway.dictionary.update_time</code>. 修改时间
     */
    public final TableField<DictionaryRecord, LocalDateTime> UPDATE_TIME = createField(DSL.name("update_time"), SQLDataType.LOCALDATETIME(0).nullable(false).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "修改时间");

    private Dictionary(Name alias, Table<DictionaryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Dictionary(Name alias, Table<DictionaryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("字典表"), TableOptions.table());
    }

    /**
     * Create an aliased <code>gateway.dictionary</code> table reference
     */
    public Dictionary(String alias) {
        this(DSL.name(alias), DICTIONARY);
    }

    /**
     * Create an aliased <code>gateway.dictionary</code> table reference
     */
    public Dictionary(Name alias) {
        this(alias, DICTIONARY);
    }

    /**
     * Create a <code>gateway.dictionary</code> table reference
     */
    public Dictionary() {
        this(DSL.name("dictionary"), null);
    }

    public <O extends Record> Dictionary(Table<O> child, ForeignKey<O, DictionaryRecord> key) {
        super(child, key, DICTIONARY);
    }

    @Override
    public Schema getSchema() {
        return Gateway.GATEWAY;
    }

    @Override
    public Dictionary as(String alias) {
        return new Dictionary(DSL.name(alias), this);
    }

    @Override
    public Dictionary as(Name alias) {
        return new Dictionary(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dictionary rename(String name) {
        return new Dictionary(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dictionary rename(Name name) {
        return new Dictionary(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Integer, String, String, String, String, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
